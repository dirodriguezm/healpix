/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: healpix.i


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__healpix_cxx_5a797e8e3d968ccb(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__healpix_cxx_5a797e8e3d968ccb(p);
}



#define SWIG_VERSION 0x040201
#define SWIGGO
#define SWIGMODULE healpix_cxx
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "vec3.h"
#include "geom_utils.h"
#include "healpix_base.h"
#include "healpix_map.h"


#include <stdint.h>		// Use the C99 official header


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< float >::const_reference std_vector_Sl_float_Sg__get(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_float_Sg__set(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_int64_t_Sg__get(std::vector< int64_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int64_t_Sg__set(std::vector< int64_t > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< pointing >::const_reference std_vector_Sl_pointing_Sg__get(std::vector< pointing > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_pointing_Sg__set(std::vector< pointing > *self,int i,std::vector< pointing >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_healpix_cxx_5a797e8e3d968ccb(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_healpix_cxx_5a797e8e3d968ccb(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_pointing_theta_set_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0, double _swig_go_1) {
  pointing *arg1 = (pointing *) 0 ;
  double arg2 ;
  
  arg1 = *(pointing **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->theta = arg2;
  
}


double _wrap_pointing_theta_get_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0) {
  pointing *arg1 = (pointing *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(pointing **)&_swig_go_0; 
  
  result = (double) ((arg1)->theta);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_pointing_phi_set_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0, double _swig_go_1) {
  pointing *arg1 = (pointing *) 0 ;
  double arg2 ;
  
  arg1 = *(pointing **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->phi = arg2;
  
}


double _wrap_pointing_phi_get_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0) {
  pointing *arg1 = (pointing *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(pointing **)&_swig_go_0; 
  
  result = (double) ((arg1)->phi);
  _swig_go_result = result; 
  return _swig_go_result;
}


pointing *_wrap_new_pointing__SWIG_0_healpix_cxx_5a797e8e3d968ccb() {
  pointing *result = 0 ;
  pointing *_swig_go_result;
  
  
  result = (pointing *)new pointing();
  *(pointing **)&_swig_go_result = (pointing *)result; 
  return _swig_go_result;
}


pointing *_wrap_new_pointing__SWIG_1_healpix_cxx_5a797e8e3d968ccb(double _swig_go_0, double _swig_go_1) {
  double arg1 ;
  double arg2 ;
  pointing *result = 0 ;
  pointing *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (pointing *)new pointing(arg1,arg2);
  *(pointing **)&_swig_go_result = (pointing *)result; 
  return _swig_go_result;
}


pointing *_wrap_new_pointing__SWIG_2_healpix_cxx_5a797e8e3d968ccb(vec3_t< float64 > *_swig_go_0) {
  vec3 *arg1 = 0 ;
  pointing *result = 0 ;
  pointing *_swig_go_result;
  
  arg1 = *(vec3 **)&_swig_go_0; 
  
  result = (pointing *)new pointing((vec3 const &)*arg1);
  *(pointing **)&_swig_go_result = (pointing *)result; 
  return _swig_go_result;
}


vec3_t< float64 > *_wrap_pointing_to_vec3_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0) {
  pointing *arg1 = (pointing *) 0 ;
  SwigValueWrapper< vec3_t< float64 > > result;
  vec3_t< float64 > *_swig_go_result;
  
  arg1 = *(pointing **)&_swig_go_0; 
  
  result = ((pointing const *)arg1)->to_vec3();
  *(vec3 **)&_swig_go_result = new vec3(result); 
  return _swig_go_result;
}


void _wrap_pointing_from_vec3_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0, vec3_t< float64 > *_swig_go_1) {
  pointing *arg1 = (pointing *) 0 ;
  vec3 *arg2 = 0 ;
  
  arg1 = *(pointing **)&_swig_go_0; 
  arg2 = *(vec3 **)&_swig_go_1; 
  
  (arg1)->from_vec3((vec3 const &)*arg2);
  
}


void _wrap_pointing_normalize_theta_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0) {
  pointing *arg1 = (pointing *) 0 ;
  
  arg1 = *(pointing **)&_swig_go_0; 
  
  (arg1)->normalize_theta();
  
}


void _wrap_pointing_normalize_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0) {
  pointing *arg1 = (pointing *) 0 ;
  
  arg1 = *(pointing **)&_swig_go_0; 
  
  (arg1)->normalize();
  
}


void _wrap_delete_pointing_healpix_cxx_5a797e8e3d968ccb(pointing *_swig_go_0) {
  pointing *arg1 = (pointing *) 0 ;
  
  arg1 = *(pointing **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< double > *_wrap_new_VectorF64__SWIG_0_healpix_cxx_5a797e8e3d968ccb() {
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


std::vector< double > *_wrap_new_VectorF64__SWIG_1_healpix_cxx_5a797e8e3d968ccb(long long _swig_go_0) {
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


std::vector< double > *_wrap_new_VectorF64__SWIG_2_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorF64_size_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = ((std::vector< double > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorF64_capacity_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = ((std::vector< double > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorF64_reserve_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0, long long _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorF64_isEmpty_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorF64_clear_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorF64_add_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0, double _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (std::vector< double >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  
}


double _wrap_VectorF64_get_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0, intgo _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  double _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (double)*result; 
  return _swig_go_result;
}


void _wrap_VectorF64_set_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0, intgo _swig_go_1, double _swig_go_2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< double >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_VectorF64_healpix_cxx_5a797e8e3d968ccb(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< float > *_wrap_new_VectorF32__SWIG_0_healpix_cxx_5a797e8e3d968ccb() {
  std::vector< float > *result = 0 ;
  std::vector< float > *_swig_go_result;
  
  
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&_swig_go_result = (std::vector< float > *)result; 
  return _swig_go_result;
}


std::vector< float > *_wrap_new_VectorF32__SWIG_1_healpix_cxx_5a797e8e3d968ccb(long long _swig_go_0) {
  std::vector< float >::size_type arg1 ;
  std::vector< float > *result = 0 ;
  std::vector< float > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< float > *)new std::vector< float >(arg1);
  *(std::vector< float > **)&_swig_go_result = (std::vector< float > *)result; 
  return _swig_go_result;
}


std::vector< float > *_wrap_new_VectorF32__SWIG_2_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  std::vector< float > *_swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  *(std::vector< float > **)&_swig_go_result = (std::vector< float > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorF32_size_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = ((std::vector< float > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorF32_capacity_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = ((std::vector< float > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorF32_reserve_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0, long long _swig_go_1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorF32_isEmpty_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorF32_clear_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorF32_add_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0, float _swig_go_1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (std::vector< float >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
  
}


float _wrap_VectorF32_get_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0, intgo _swig_go_1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  float _swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (float)*result; 
  return _swig_go_result;
}


void _wrap_VectorF32_set_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0, intgo _swig_go_1, float _swig_go_2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< float >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_VectorF32_healpix_cxx_5a797e8e3d968ccb(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< long long > *_wrap_new_VectorI64__SWIG_0_healpix_cxx_5a797e8e3d968ccb() {
  std::vector< int64_t > *result = 0 ;
  std::vector< long long > *_swig_go_result;
  
  
  result = (std::vector< int64_t > *)new std::vector< int64_t >();
  *(std::vector< int64_t > **)&_swig_go_result = (std::vector< int64_t > *)result; 
  return _swig_go_result;
}


std::vector< long long > *_wrap_new_VectorI64__SWIG_1_healpix_cxx_5a797e8e3d968ccb(long long _swig_go_0) {
  std::vector< long long >::size_type arg1 ;
  std::vector< int64_t > *result = 0 ;
  std::vector< long long > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< int64_t > *)new std::vector< int64_t >(arg1);
  *(std::vector< int64_t > **)&_swig_go_result = (std::vector< int64_t > *)result; 
  return _swig_go_result;
}


std::vector< long long > *_wrap_new_VectorI64__SWIG_2_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0) {
  std::vector< int64_t > *arg1 = 0 ;
  std::vector< int64_t > *result = 0 ;
  std::vector< long long > *_swig_go_result;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  
  result = (std::vector< int64_t > *)new std::vector< int64_t >((std::vector< int64_t > const &)*arg1);
  *(std::vector< int64_t > **)&_swig_go_result = (std::vector< int64_t > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorI64_size_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  
  result = ((std::vector< int64_t > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorI64_capacity_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  
  result = ((std::vector< int64_t > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorI64_reserve_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0, long long _swig_go_1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorI64_isEmpty_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  
  result = (bool)((std::vector< int64_t > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorI64_clear_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorI64_add_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0, long long _swig_go_1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  arg2 = (std::vector< long long >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
  
}


long long _wrap_VectorI64_get_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0, intgo _swig_go_1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_int64_t_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (long long)*result; 
  return _swig_go_result;
}


void _wrap_VectorI64_set_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0, intgo _swig_go_1, long long _swig_go_2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< long long >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_int64_t_Sg__set(arg1,arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_VectorI64_healpix_cxx_5a797e8e3d968ccb(std::vector< long long > *_swig_go_0) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = *(std::vector< int64_t > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< int > *_wrap_new_VectorInt__SWIG_0_healpix_cxx_5a797e8e3d968ccb() {
  std::vector< int > *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&_swig_go_result = (std::vector< int > *)result; 
  return _swig_go_result;
}


std::vector< int > *_wrap_new_VectorInt__SWIG_1_healpix_cxx_5a797e8e3d968ccb(long long _swig_go_0) {
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&_swig_go_result = (std::vector< int > *)result; 
  return _swig_go_result;
}


std::vector< int > *_wrap_new_VectorInt__SWIG_2_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  *(std::vector< int > **)&_swig_go_result = (std::vector< int > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorInt_size_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = ((std::vector< int > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorInt_capacity_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = ((std::vector< int > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorInt_reserve_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0, long long _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorInt_isEmpty_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorInt_clear_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorInt_add_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (std::vector< int >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  
  
}


intgo _wrap_VectorInt_get_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  intgo _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (int)*result; 
  return _swig_go_result;
}


void _wrap_VectorInt_set_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< int >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void _wrap_delete_VectorInt_healpix_cxx_5a797e8e3d968ccb(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< pointing > *_wrap_new_VectorPointing__SWIG_0_healpix_cxx_5a797e8e3d968ccb() {
  std::vector< pointing > *result = 0 ;
  std::vector< pointing > *_swig_go_result;
  
  
  result = (std::vector< pointing > *)new std::vector< pointing >();
  *(std::vector< pointing > **)&_swig_go_result = (std::vector< pointing > *)result; 
  return _swig_go_result;
}


std::vector< pointing > *_wrap_new_VectorPointing__SWIG_1_healpix_cxx_5a797e8e3d968ccb(long long _swig_go_0) {
  std::vector< pointing >::size_type arg1 ;
  std::vector< pointing > *result = 0 ;
  std::vector< pointing > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< pointing > *)new std::vector< pointing >(arg1);
  *(std::vector< pointing > **)&_swig_go_result = (std::vector< pointing > *)result; 
  return _swig_go_result;
}


std::vector< pointing > *_wrap_new_VectorPointing__SWIG_2_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0) {
  std::vector< pointing > *arg1 = 0 ;
  std::vector< pointing > *result = 0 ;
  std::vector< pointing > *_swig_go_result;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  
  result = (std::vector< pointing > *)new std::vector< pointing >((std::vector< pointing > const &)*arg1);
  *(std::vector< pointing > **)&_swig_go_result = (std::vector< pointing > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorPointing_size_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  std::vector< pointing >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  
  result = ((std::vector< pointing > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorPointing_capacity_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  std::vector< pointing >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  
  result = ((std::vector< pointing > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorPointing_reserve_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0, long long _swig_go_1) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  std::vector< pointing >::size_type arg2 ;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorPointing_isEmpty_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  
  result = (bool)((std::vector< pointing > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorPointing_clear_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorPointing_add_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0, pointing *_swig_go_1) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  std::vector< pointing >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  arg2 = *(std::vector< pointing >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< pointing >::value_type const &)*arg2);
  
}


pointing *_wrap_VectorPointing_get_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0, intgo _swig_go_1) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  int arg2 ;
  std::vector< pointing >::value_type *result = 0 ;
  pointing *_swig_go_result;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< pointing >::value_type *) &std_vector_Sl_pointing_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< pointing >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorPointing_set_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0, intgo _swig_go_1, pointing *_swig_go_2) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  int arg2 ;
  std::vector< pointing >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< pointing >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_pointing_Sg__set(arg1,arg2,(pointing const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_VectorPointing_healpix_cxx_5a797e8e3d968ccb(std::vector< pointing > *_swig_go_0) {
  std::vector< pointing > *arg1 = (std::vector< pointing > *) 0 ;
  
  arg1 = *(std::vector< pointing > **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Vec3Floats_x_set_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, double _swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double arg2 ;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


double _wrap_Vec3Floats_x_get_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  result = (double) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Vec3Floats_y_set_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, double _swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double arg2 ;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


double _wrap_Vec3Floats_y_get_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  result = (double) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Vec3Floats_z_set_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, double _swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double arg2 ;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


double _wrap_Vec3Floats_z_get_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  result = (double) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


vec3_t< double > *_wrap_new_Vec3Floats__SWIG_0_healpix_cxx_5a797e8e3d968ccb() {
  vec3_t< double > *result = 0 ;
  vec3_t< double > *_swig_go_result;
  
  
  result = (vec3_t< double > *)new vec3_t< double >();
  *(vec3_t< double > **)&_swig_go_result = (vec3_t< double > *)result; 
  return _swig_go_result;
}


vec3_t< double > *_wrap_new_Vec3Floats__SWIG_1_healpix_cxx_5a797e8e3d968ccb(double _swig_go_0, double _swig_go_1, double _swig_go_2) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  vec3_t< double > *result = 0 ;
  vec3_t< double > *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  result = (vec3_t< double > *)new vec3_t< double >(arg1,arg2,arg3);
  *(vec3_t< double > **)&_swig_go_result = (vec3_t< double > *)result; 
  return _swig_go_result;
}


void _wrap_Vec3Floats_Set_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  
  (arg1)->Set(arg2,arg3,arg4);
  
}


void _wrap_Vec3Floats_set_z_phi_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, double _swig_go_1, double _swig_go_2) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  (arg1)->set_z_phi(arg2,arg3);
  
}


void _wrap_Vec3Floats_Normalize_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  (arg1)->Normalize();
  
}


vec3_t< double > *_wrap_Vec3Floats_Norm_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  vec3_t< double > result;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  result = ((vec3_t< double > const *)arg1)->Norm();
  *(vec3_t< double > **)&_swig_go_result = new vec3_t< double >(result); 
  return _swig_go_result;
}


double _wrap_Vec3Floats_Length_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  result = (double)((vec3_t< double > const *)arg1)->Length();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Vec3Floats_SquaredLength_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  result = (double)((vec3_t< double > const *)arg1)->SquaredLength();
  _swig_go_result = result; 
  return _swig_go_result;
}


vec3_t< double > *_wrap_Vec3Floats_invert_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  vec3_t< double > result;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  result = ((vec3_t< double > const *)arg1)->operator -();
  *(vec3_t< double > **)&_swig_go_result = new vec3_t< double >(result); 
  return _swig_go_result;
}


void _wrap_Vec3Floats_Flip_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  (arg1)->Flip();
  
}


vec3_t< double > *_wrap_Vec3Floats_add_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, vec3_t< double > *_swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  vec3_t< double > *arg2 = 0 ;
  vec3_t< double > result;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = *(vec3_t< double > **)&_swig_go_1; 
  
  result = ((vec3_t< double > const *)arg1)->operator +((vec3_t< double > const &)*arg2);
  *(vec3_t< double > **)&_swig_go_result = new vec3_t< double >(result); 
  return _swig_go_result;
}


vec3_t< double > *_wrap_Vec3Floats_addInPlace_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, vec3_t< double > *_swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  vec3_t< double > *arg2 = 0 ;
  vec3_t< double > *result = 0 ;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = *(vec3_t< double > **)&_swig_go_1; 
  
  result = (vec3_t< double > *) &(arg1)->operator +=((vec3_t< double > const &)*arg2);
  *(vec3_t< double > **)&_swig_go_result = result; 
  return _swig_go_result;
}


vec3_t< double > *_wrap_Vec3Floats_subtract_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, vec3_t< double > *_swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  vec3_t< double > *arg2 = 0 ;
  vec3_t< double > result;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = *(vec3_t< double > **)&_swig_go_1; 
  
  result = ((vec3_t< double > const *)arg1)->operator -((vec3_t< double > const &)*arg2);
  *(vec3_t< double > **)&_swig_go_result = new vec3_t< double >(result); 
  return _swig_go_result;
}


vec3_t< double > *_wrap_Vec3Floats_subtractInPlace_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, vec3_t< double > *_swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  vec3_t< double > *arg2 = 0 ;
  vec3_t< double > *result = 0 ;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = *(vec3_t< double > **)&_swig_go_1; 
  
  result = (vec3_t< double > *) &(arg1)->operator -=((vec3_t< double > const &)*arg2);
  *(vec3_t< double > **)&_swig_go_result = result; 
  return _swig_go_result;
}


vec3_t< double > *_wrap_Vec3Floats_multiply_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, double _swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double arg2 ;
  vec3_t< double > result;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = ((vec3_t< double > const *)arg1)->operator *(arg2);
  *(vec3_t< double > **)&_swig_go_result = new vec3_t< double >(result); 
  return _swig_go_result;
}


vec3_t< double > *_wrap_Vec3Floats_divide_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, double _swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double arg2 ;
  vec3_t< double > result;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = ((vec3_t< double > const *)arg1)->operator /(arg2);
  *(vec3_t< double > **)&_swig_go_result = new vec3_t< double >(result); 
  return _swig_go_result;
}


vec3_t< double > *_wrap_Vec3Floats_multiplyInPlace_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0, double _swig_go_1) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  double arg2 ;
  vec3_t< double > *result = 0 ;
  vec3_t< double > *_swig_go_result;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  result = (vec3_t< double > *) &(arg1)->operator *=(arg2);
  *(vec3_t< double > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Vec3Floats_healpix_cxx_5a797e8e3d968ccb(vec3_t< double > *_swig_go_0) {
  vec3_t< double > *arg1 = (vec3_t< double > *) 0 ;
  
  arg1 = *(vec3_t< double > **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Rangeset_clear_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_Rangeset_reserve_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, tsize *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  tsize arg2 ;
  tsize *argp2 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  argp2 = (tsize *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null tsize");
  }
  arg2 = (tsize)*argp2;
  
  
  (arg1)->reserve(arg2);
  
}


tsize *_wrap_Rangeset_nranges_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  tsize result;
  tsize *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  result = ((rangeset< int64_t > const *)arg1)->nranges();
  *(tsize **)&_swig_go_result = new tsize(result); 
  return _swig_go_result;
}


tsize *_wrap_Rangeset_size_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  tsize result;
  tsize *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  result = ((rangeset< int64_t > const *)arg1)->size();
  *(tsize **)&_swig_go_result = new tsize(result); 
  return _swig_go_result;
}


bool _wrap_Rangeset_empty_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  result = (bool)((rangeset< int64_t > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< long long > *_wrap_Rangeset_data_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< long long >::rtype *result = 0 ;
  std::vector< long long > *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  result = (rangeset< long long >::rtype *) &((rangeset< int64_t > const *)arg1)->data();
  *(rangeset< long long >::rtype **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Rangeset_checkConsistency_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  ((rangeset< int64_t > const *)arg1)->checkConsistency();
  
}


void _wrap_Rangeset_setData_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, std::vector< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< long long >::rtype *arg2 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(rangeset< long long >::rtype **)&_swig_go_1; 
  
  (arg1)->setData((rangeset< long long >::rtype const &)*arg2);
  
}


long long _wrap_Rangeset_ivbegin_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, tdiff *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  tdiff arg2 ;
  tdiff *argp2 ;
  long long *result = 0 ;
  long long _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  argp2 = (tdiff *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null tdiff");
  }
  arg2 = (tdiff)*argp2;
  
  
  result = (long long *) &((rangeset< int64_t > const *)arg1)->ivbegin(arg2);
  _swig_go_result = (long long)*result; 
  return _swig_go_result;
}


long long _wrap_Rangeset_ivend_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, tdiff *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  tdiff arg2 ;
  tdiff *argp2 ;
  long long *result = 0 ;
  long long _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  argp2 = (tdiff *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null tdiff");
  }
  arg2 = (tdiff)*argp2;
  
  
  result = (long long *) &((rangeset< int64_t > const *)arg1)->ivend(arg2);
  _swig_go_result = (long long)*result; 
  return _swig_go_result;
}


long long _wrap_Rangeset_ivlen_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, tdiff *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  tdiff arg2 ;
  tdiff *argp2 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  argp2 = (tdiff *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null tdiff");
  }
  arg2 = (tdiff)*argp2;
  
  
  result = (long long)((rangeset< int64_t > const *)arg1)->ivlen(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Rangeset_append__SWIG_0_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1, long long _swig_go_2) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long *arg3 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long *)&_swig_go_1; 
  arg3 = (long long *)&_swig_go_2; 
  
  (arg1)->append((long long const &)*arg2,(long long const &)*arg3);
  
}


void _wrap_Rangeset_append__SWIG_1_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long *)&_swig_go_1; 
  
  (arg1)->append((long long const &)*arg2);
  
}


void _wrap_Rangeset_append__SWIG_2_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, rangeset< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< int64_t > *arg2 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(rangeset< int64_t > **)&_swig_go_1; 
  
  (arg1)->append((rangeset< int64_t > const &)*arg2);
  
}


void _wrap_Rangeset_add__SWIG_0_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1, long long _swig_go_2) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long *arg3 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long *)&_swig_go_1; 
  arg3 = (long long *)&_swig_go_2; 
  
  (arg1)->add((long long const &)*arg2,(long long const &)*arg3);
  
}


void _wrap_Rangeset_add__SWIG_1_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long *)&_swig_go_1; 
  
  (arg1)->add((long long const &)*arg2);
  
}


void _wrap_Rangeset_remove__SWIG_0_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1, long long _swig_go_2) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long *arg3 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long *)&_swig_go_1; 
  arg3 = (long long *)&_swig_go_2; 
  
  (arg1)->remove((long long const &)*arg2,(long long const &)*arg3);
  
}


void _wrap_Rangeset_remove__SWIG_1_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long *)&_swig_go_1; 
  
  (arg1)->remove((long long const &)*arg2);
  
}


void _wrap_Rangeset_intersect_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1, long long _swig_go_2) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long *arg3 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long *)&_swig_go_1; 
  arg3 = (long long *)&_swig_go_2; 
  
  (arg1)->intersect((long long const &)*arg2,(long long const &)*arg3);
  
}


long long _wrap_Rangeset_nval_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  result = (long long)((rangeset< int64_t > const *)arg1)->nval();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Rangeset_toVector__SWIG_0_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, std::vector< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  std::vector< long long > *arg2 = 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(std::vector< long long > **)&_swig_go_1; 
  
  ((rangeset< int64_t > const *)arg1)->toVector(*arg2);
  
}


std::vector< long long > *_wrap_Rangeset_toVector__SWIG_1_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  std::vector< long long > result;
  std::vector< long long > *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  result = ((rangeset< int64_t > const *)arg1)->toVector();
  *(std::vector< long long > **)&_swig_go_result = new std::vector< long long >(result); 
  return _swig_go_result;
}


rangeset< long long > *_wrap_Rangeset_op_or_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, rangeset< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< int64_t > *arg2 = 0 ;
  rangeset< int64_t > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(rangeset< int64_t > **)&_swig_go_1; 
  
  result = ((rangeset< int64_t > const *)arg1)->op_or((rangeset< int64_t > const &)*arg2);
  *(rangeset< int64_t > **)&_swig_go_result = new rangeset< int64_t >(result); 
  return _swig_go_result;
}


rangeset< long long > *_wrap_Rangeset_op_and_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, rangeset< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< int64_t > *arg2 = 0 ;
  rangeset< int64_t > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(rangeset< int64_t > **)&_swig_go_1; 
  
  result = ((rangeset< int64_t > const *)arg1)->op_and((rangeset< int64_t > const &)*arg2);
  *(rangeset< int64_t > **)&_swig_go_result = new rangeset< int64_t >(result); 
  return _swig_go_result;
}


rangeset< long long > *_wrap_Rangeset_op_andnot_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, rangeset< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< int64_t > *arg2 = 0 ;
  rangeset< int64_t > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(rangeset< int64_t > **)&_swig_go_1; 
  
  result = ((rangeset< int64_t > const *)arg1)->op_andnot((rangeset< int64_t > const &)*arg2);
  *(rangeset< int64_t > **)&_swig_go_result = new rangeset< int64_t >(result); 
  return _swig_go_result;
}


rangeset< long long > *_wrap_Rangeset_op_xor_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, rangeset< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< int64_t > *arg2 = 0 ;
  rangeset< int64_t > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(rangeset< int64_t > **)&_swig_go_1; 
  
  result = ((rangeset< int64_t > const *)arg1)->op_xor((rangeset< int64_t > const &)*arg2);
  *(rangeset< int64_t > **)&_swig_go_result = new rangeset< int64_t >(result); 
  return _swig_go_result;
}


tdiff *_wrap_Rangeset_findInterval_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  tdiff result;
  tdiff *_swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long *)&_swig_go_1; 
  
  result = ((rangeset< int64_t > const *)arg1)->findInterval((long long const &)*arg2);
  *(tdiff **)&_swig_go_result = new tdiff(result); 
  return _swig_go_result;
}


bool _wrap_Rangeset_contains__SWIG_0_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1, long long _swig_go_2) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long arg2 ;
  long long arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = (long long)_swig_go_2; 
  
  result = (bool)((rangeset< int64_t > const *)arg1)->contains(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Rangeset_contains__SWIG_1_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = (bool)((rangeset< int64_t > const *)arg1)->contains(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Rangeset_contains__SWIG_2_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, rangeset< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< int64_t > *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(rangeset< int64_t > **)&_swig_go_1; 
  
  result = (bool)((rangeset< int64_t > const *)arg1)->contains((rangeset< int64_t > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Rangeset_overlaps__SWIG_0_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, long long _swig_go_1, long long _swig_go_2) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  long long arg2 ;
  long long arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = (long long)_swig_go_2; 
  
  result = (bool)((rangeset< int64_t > const *)arg1)->overlaps(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Rangeset_overlaps__SWIG_1_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0, rangeset< long long > *_swig_go_1) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  rangeset< int64_t > *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  arg2 = *(rangeset< int64_t > **)&_swig_go_1; 
  
  result = (bool)((rangeset< int64_t > const *)arg1)->overlaps((rangeset< int64_t > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Rangeset_healpix_cxx_5a797e8e3d968ccb(rangeset< long long > *_swig_go_0) {
  rangeset< int64_t > *arg1 = (rangeset< int64_t > *) 0 ;
  
  arg1 = *(rangeset< int64_t > **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RING_healpix_cxx_5a797e8e3d968ccb() {
  Healpix_Ordering_Scheme result;
  intgo _swig_go_result;
  
  
  result = RING;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_NEST_healpix_cxx_5a797e8e3d968ccb() {
  Healpix_Ordering_Scheme result;
  intgo _swig_go_result;
  
  
  result = NEST;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_string2HealpixScheme_healpix_cxx_5a797e8e3d968ccb(std::string *_swig_go_0) {
  std::string *arg1 = 0 ;
  Healpix_Ordering_Scheme result;
  intgo _swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  
  result = (Healpix_Ordering_Scheme)string2HealpixScheme((std::string const &)*arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


nside_dummy *_wrap_new_nside_dummy_healpix_cxx_5a797e8e3d968ccb() {
  nside_dummy *result = 0 ;
  nside_dummy *_swig_go_result;
  
  
  result = (nside_dummy *)new nside_dummy();
  *(nside_dummy **)&_swig_go_result = (nside_dummy *)result; 
  return _swig_go_result;
}


void _wrap_delete_nside_dummy_healpix_cxx_5a797e8e3d968ccb(nside_dummy *_swig_go_0) {
  nside_dummy *arg1 = (nside_dummy *) 0 ;
  
  arg1 = *(nside_dummy **)&_swig_go_0; 
  
  delete arg1;
  
}


nside_dummy *_wrap_SET_NSIDE_get_healpix_cxx_5a797e8e3d968ccb() {
  nside_dummy *result = 0 ;
  nside_dummy *_swig_go_result;
  
  
  result = (nside_dummy *)&SET_NSIDE;
  *(nside_dummy **)&_swig_go_result = (nside_dummy *)result; 
  return _swig_go_result;
}


Healpix_Tables *_wrap_new_Healpix_Tables_healpix_cxx_5a797e8e3d968ccb() {
  Healpix_Tables *result = 0 ;
  Healpix_Tables *_swig_go_result;
  
  
  result = (Healpix_Tables *)new Healpix_Tables();
  *(Healpix_Tables **)&_swig_go_result = (Healpix_Tables *)result; 
  return _swig_go_result;
}


void _wrap_delete_Healpix_Tables_healpix_cxx_5a797e8e3d968ccb(Healpix_Tables *_swig_go_0) {
  Healpix_Tables *arg1 = (Healpix_Tables *) 0 ;
  
  arg1 = *(Healpix_Tables **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_order_max_Healpix_Base_healpix_cxx_5a797e8e3d968ccb() {
  int result;
  intgo _swig_go_result;
  
  
  result = T_Healpix_Base< int64_t >::order_max;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Healpix_Base_nside2order_healpix_cxx_5a797e8e3d968ccb(long long _swig_go_0) {
  long long arg1 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (long long)_swig_go_0; 
  
  result = (int)T_Healpix_Base< int64_t >::SWIGTEMPLATEDISAMBIGUATOR nside2order(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_npix2nside_healpix_cxx_5a797e8e3d968ccb(long long _swig_go_0) {
  long long arg1 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = (long long)_swig_go_0; 
  
  result = (long long)T_Healpix_Base< int64_t >::SWIGTEMPLATEDISAMBIGUATOR npix2nside(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


T_Healpix_Base< long long > *_wrap_new_Healpix_Base__SWIG_0_healpix_cxx_5a797e8e3d968ccb() {
  T_Healpix_Base< int64_t > *result = 0 ;
  T_Healpix_Base< long long > *_swig_go_result;
  
  
  result = (T_Healpix_Base< int64_t > *)new T_Healpix_Base< int64_t >();
  *(T_Healpix_Base< int64_t > **)&_swig_go_result = (T_Healpix_Base< int64_t > *)result; 
  return _swig_go_result;
}


T_Healpix_Base< long long > *_wrap_new_Healpix_Base__SWIG_1_healpix_cxx_5a797e8e3d968ccb(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  Healpix_Ordering_Scheme arg2 ;
  T_Healpix_Base< int64_t > *result = 0 ;
  T_Healpix_Base< long long > *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (Healpix_Ordering_Scheme)_swig_go_1; 
  
  result = (T_Healpix_Base< int64_t > *)new T_Healpix_Base< int64_t >(arg1,arg2);
  *(T_Healpix_Base< int64_t > **)&_swig_go_result = (T_Healpix_Base< int64_t > *)result; 
  return _swig_go_result;
}


T_Healpix_Base< long long > *_wrap_new_Healpix_Base__SWIG_2_healpix_cxx_5a797e8e3d968ccb(long long _swig_go_0, intgo _swig_go_1, nside_dummy *_swig_go_2) {
  long long arg1 ;
  Healpix_Ordering_Scheme arg2 ;
  nside_dummy arg3 ;
  nside_dummy const *argp3 ;
  T_Healpix_Base< int64_t > *result = 0 ;
  T_Healpix_Base< long long > *_swig_go_result;
  
  arg1 = (long long)_swig_go_0; 
  arg2 = (Healpix_Ordering_Scheme)_swig_go_1; 
  
  argp3 = (nside_dummy *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null nside_dummy const");
  }
  arg3 = (nside_dummy)*argp3;
  
  
  result = (T_Healpix_Base< int64_t > *)new T_Healpix_Base< int64_t >(arg1,arg2,arg3);
  *(T_Healpix_Base< int64_t > **)&_swig_go_result = (T_Healpix_Base< int64_t > *)result; 
  return _swig_go_result;
}


void _wrap_Healpix_Base_Set_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  int arg2 ;
  Healpix_Ordering_Scheme arg3 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (Healpix_Ordering_Scheme)_swig_go_2; 
  
  (arg1)->Set(arg2,arg3);
  
}


void _wrap_Healpix_Base_SetNside_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, intgo _swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  Healpix_Ordering_Scheme arg3 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = (Healpix_Ordering_Scheme)_swig_go_2; 
  
  (arg1)->SetNside(arg2,arg3);
  
}


double _wrap_Healpix_Base_ring2z_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = (double)((T_Healpix_Base< int64_t > const *)arg1)->ring2z(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_pix2ring_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->pix2ring(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_xyf2pix_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->xyf2pix(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Healpix_Base_pix2xyf_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3, intgo *_swig_go_4) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int e3 ;
  int e4 ;
  int e5 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  e3 = (int)*_swig_go_2;
  arg3 = &e3;
  
  
  e4 = (int)*_swig_go_3;
  arg4 = &e4;
  
  
  e5 = (int)*_swig_go_4;
  arg5 = &e5;
  
  
  ((T_Healpix_Base< int64_t > const *)arg1)->pix2xyf(arg2,*arg3,*arg4,*arg5);
  
  *_swig_go_2 = (intgo)e3; 
  *_swig_go_3 = (intgo)e4; 
  *_swig_go_4 = (intgo)e5; 
}


long long _wrap_Healpix_Base_nest2ring_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->nest2ring(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_ring2nest_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->ring2nest(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_nest2peano_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->nest2peano(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_peano2nest_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->peano2nest(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_zphi2pix_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, double _swig_go_1, double _swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  double arg2 ;
  double arg3 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->zphi2pix(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_ang2pix_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing *arg2 = 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(pointing **)&_swig_go_1; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->ang2pix((pointing const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_vec2pix_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, vec3_t< float64 > *_swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  vec3 *arg2 = 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(vec3 **)&_swig_go_1; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->vec2pix((vec3 const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Healpix_Base_pix2zphi_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, double *_swig_go_2, double *_swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = *(double **)&_swig_go_2; 
  arg4 = *(double **)&_swig_go_3; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->pix2zphi(arg2,*arg3,*arg4);
  
}


pointing *_wrap_Healpix_Base_pix2ang_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  pointing result;
  pointing *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->pix2ang(arg2);
  *(pointing **)&_swig_go_result = new pointing(result); 
  return _swig_go_result;
}


vec3_t< float64 > *_wrap_Healpix_Base_pix2vec_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  SwigValueWrapper< vec3_t< float64 > > result;
  vec3_t< float64 > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->pix2vec(arg2);
  *(vec3 **)&_swig_go_result = new vec3(result); 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_pixel_import_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, T_Healpix_Base< long long > *_swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  T_Healpix_Base< int64_t > *arg3 = 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = *(T_Healpix_Base< int64_t > **)&_swig_go_2; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->pixel_import(arg2,(T_Healpix_Base< int64_t > const &)*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Healpix_Base_query_disc__SWIG_0_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2, rangeset< long long > *_swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing arg2 ;
  double arg3 ;
  rangeset< long long > *arg4 = 0 ;
  pointing *argp2 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  argp2 = (pointing *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null pointing");
  }
  arg2 = (pointing)*argp2;
  
  arg3 = (double)_swig_go_2; 
  arg4 = *(rangeset< long long > **)&_swig_go_3; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_disc(arg2,arg3,*arg4);
  
}


rangeset< long long > *_wrap_Healpix_Base_query_disc__SWIG_1_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing arg2 ;
  double arg3 ;
  pointing *argp2 ;
  rangeset< long long > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  argp2 = (pointing *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null pointing");
  }
  arg2 = (pointing)*argp2;
  
  arg3 = (double)_swig_go_2; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->query_disc(arg2,arg3);
  *(rangeset< long long > **)&_swig_go_result = new rangeset< long long >(result); 
  return _swig_go_result;
}


void _wrap_Healpix_Base_query_disc_inclusive__SWIG_0_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2, rangeset< long long > *_swig_go_3, intgo _swig_go_4) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing arg2 ;
  double arg3 ;
  rangeset< long long > *arg4 = 0 ;
  int arg5 ;
  pointing *argp2 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  argp2 = (pointing *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null pointing");
  }
  arg2 = (pointing)*argp2;
  
  arg3 = (double)_swig_go_2; 
  arg4 = *(rangeset< long long > **)&_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_disc_inclusive(arg2,arg3,*arg4,arg5);
  
}


void _wrap_Healpix_Base_query_disc_inclusive__SWIG_1_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2, rangeset< long long > *_swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing arg2 ;
  double arg3 ;
  rangeset< long long > *arg4 = 0 ;
  pointing *argp2 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  argp2 = (pointing *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null pointing");
  }
  arg2 = (pointing)*argp2;
  
  arg3 = (double)_swig_go_2; 
  arg4 = *(rangeset< long long > **)&_swig_go_3; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_disc_inclusive(arg2,arg3,*arg4);
  
}


rangeset< long long > *_wrap_Healpix_Base_query_disc_inclusive__SWIG_2_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2, intgo _swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing arg2 ;
  double arg3 ;
  int arg4 ;
  pointing *argp2 ;
  rangeset< long long > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  argp2 = (pointing *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null pointing");
  }
  arg2 = (pointing)*argp2;
  
  arg3 = (double)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->query_disc_inclusive(arg2,arg3,arg4);
  *(rangeset< long long > **)&_swig_go_result = new rangeset< long long >(result); 
  return _swig_go_result;
}


rangeset< long long > *_wrap_Healpix_Base_query_disc_inclusive__SWIG_3_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing arg2 ;
  double arg3 ;
  pointing *argp2 ;
  rangeset< long long > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  argp2 = (pointing *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null pointing");
  }
  arg2 = (pointing)*argp2;
  
  arg3 = (double)_swig_go_2; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->query_disc_inclusive(arg2,arg3);
  *(rangeset< long long > **)&_swig_go_result = new rangeset< long long >(result); 
  return _swig_go_result;
}


void _wrap_Healpix_Base_query_disc__SWIG_2_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2, std::vector< long long > *_swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing *arg2 = 0 ;
  double arg3 ;
  std::vector< long long > *arg4 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(pointing **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(std::vector< long long > **)&_swig_go_3; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_disc((pointing const &)*arg2,arg3,*arg4);
  
}


void _wrap_Healpix_Base_query_disc_inclusive__SWIG_4_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2, std::vector< long long > *_swig_go_3, intgo _swig_go_4) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing *arg2 = 0 ;
  double arg3 ;
  std::vector< long long > *arg4 = 0 ;
  int arg5 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(pointing **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(std::vector< long long > **)&_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_disc_inclusive((pointing const &)*arg2,arg3,*arg4,arg5);
  
}


void _wrap_Healpix_Base_query_disc_inclusive__SWIG_5_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, double _swig_go_2, std::vector< long long > *_swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing *arg2 = 0 ;
  double arg3 ;
  std::vector< long long > *arg4 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(pointing **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(std::vector< long long > **)&_swig_go_3; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_disc_inclusive((pointing const &)*arg2,arg3,*arg4);
  
}


void _wrap_Healpix_Base_query_polygon__SWIG_0_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, std::vector< pointing > *_swig_go_1, rangeset< long long > *_swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  std::vector< pointing > *arg2 = 0 ;
  rangeset< long long > *arg3 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(std::vector< pointing > **)&_swig_go_1; 
  arg3 = *(rangeset< long long > **)&_swig_go_2; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_polygon((std::vector< pointing > const &)*arg2,*arg3);
  
}


rangeset< long long > *_wrap_Healpix_Base_query_polygon__SWIG_1_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, std::vector< pointing > *_swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  std::vector< pointing > *arg2 = 0 ;
  rangeset< long long > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(std::vector< pointing > **)&_swig_go_1; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->query_polygon((std::vector< pointing > const &)*arg2);
  *(rangeset< long long > **)&_swig_go_result = new rangeset< long long >(result); 
  return _swig_go_result;
}


void _wrap_Healpix_Base_query_polygon_inclusive__SWIG_0_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, std::vector< pointing > *_swig_go_1, rangeset< long long > *_swig_go_2, intgo _swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  std::vector< pointing > *arg2 = 0 ;
  rangeset< long long > *arg3 = 0 ;
  int arg4 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(std::vector< pointing > **)&_swig_go_1; 
  arg3 = *(rangeset< long long > **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_polygon_inclusive((std::vector< pointing > const &)*arg2,*arg3,arg4);
  
}


void _wrap_Healpix_Base_query_polygon_inclusive__SWIG_1_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, std::vector< pointing > *_swig_go_1, rangeset< long long > *_swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  std::vector< pointing > *arg2 = 0 ;
  rangeset< long long > *arg3 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(std::vector< pointing > **)&_swig_go_1; 
  arg3 = *(rangeset< long long > **)&_swig_go_2; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_polygon_inclusive((std::vector< pointing > const &)*arg2,*arg3);
  
}


rangeset< long long > *_wrap_Healpix_Base_query_polygon_inclusive__SWIG_2_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, std::vector< pointing > *_swig_go_1, intgo _swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  std::vector< pointing > *arg2 = 0 ;
  int arg3 ;
  rangeset< long long > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(std::vector< pointing > **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->query_polygon_inclusive((std::vector< pointing > const &)*arg2,arg3);
  *(rangeset< long long > **)&_swig_go_result = new rangeset< long long >(result); 
  return _swig_go_result;
}


rangeset< long long > *_wrap_Healpix_Base_query_polygon_inclusive__SWIG_3_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, std::vector< pointing > *_swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  std::vector< pointing > *arg2 = 0 ;
  rangeset< long long > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(std::vector< pointing > **)&_swig_go_1; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->query_polygon_inclusive((std::vector< pointing > const &)*arg2);
  *(rangeset< long long > **)&_swig_go_result = new rangeset< long long >(result); 
  return _swig_go_result;
}


void _wrap_Healpix_Base_query_strip__SWIG_0_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, double _swig_go_1, double _swig_go_2, bool _swig_go_3, rangeset< long long > *_swig_go_4) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  rangeset< long long > *arg5 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = *(rangeset< long long > **)&_swig_go_4; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->query_strip(arg2,arg3,arg4,*arg5);
  
}


rangeset< long long > *_wrap_Healpix_Base_query_strip__SWIG_1_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, double _swig_go_1, double _swig_go_2, bool _swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  rangeset< long long > result;
  rangeset< long long > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->query_strip(arg2,arg3,arg4);
  *(rangeset< long long > **)&_swig_go_result = new rangeset< long long >(result); 
  return _swig_go_result;
}


void _wrap_Healpix_Base_get_ring_info_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, long long *_swig_go_2, long long *_swig_go_3, double *_swig_go_4, double *_swig_go_5, bool *_swig_go_6) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  long long *arg3 = 0 ;
  long long *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  bool *arg7 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = *(long long **)&_swig_go_2; 
  arg4 = *(long long **)&_swig_go_3; 
  arg5 = *(double **)&_swig_go_4; 
  arg6 = *(double **)&_swig_go_5; 
  arg7 = *(bool **)&_swig_go_6; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->get_ring_info(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  
}


void _wrap_Healpix_Base_get_ring_info2_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, long long *_swig_go_2, long long *_swig_go_3, double *_swig_go_4, bool *_swig_go_5) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  long long *arg3 = 0 ;
  long long *arg4 = 0 ;
  double *arg5 = 0 ;
  bool *arg6 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = *(long long **)&_swig_go_2; 
  arg4 = *(long long **)&_swig_go_3; 
  arg5 = *(double **)&_swig_go_4; 
  arg6 = *(bool **)&_swig_go_5; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->get_ring_info2(arg2,*arg3,*arg4,*arg5,*arg6);
  
}


void _wrap_Healpix_Base_get_ring_info_small_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, long long *_swig_go_2, long long *_swig_go_3, bool *_swig_go_4) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  long long *arg3 = 0 ;
  long long *arg4 = 0 ;
  bool *arg5 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = *(long long **)&_swig_go_2; 
  arg4 = *(long long **)&_swig_go_3; 
  arg5 = *(bool **)&_swig_go_4; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->get_ring_info_small(arg2,*arg3,*arg4,*arg5);
  
}


void _wrap_Healpix_Base_neighbors_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, fix_arr< long long,8 > *_swig_go_2) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  fix_arr< long long,8 > *arg3 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  arg3 = *(fix_arr< long long,8 > **)&_swig_go_2; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->neighbors(arg2,*arg3);
  
}


void _wrap_Healpix_Base_get_interpol_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, pointing *_swig_go_1, fix_arr< long long,4 > *_swig_go_2, fix_arr< double,4 > *_swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  pointing *arg2 = 0 ;
  fix_arr< long long,4 > *arg3 = 0 ;
  fix_arr< double,4 > *arg4 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(pointing **)&_swig_go_1; 
  arg3 = *(fix_arr< long long,4 > **)&_swig_go_2; 
  arg4 = *(fix_arr< double,4 > **)&_swig_go_3; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->get_interpol((pointing const &)*arg2,*arg3,*arg4);
  
}


intgo _wrap_Healpix_Base_Order_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  result = (int)((T_Healpix_Base< int64_t > const *)arg1)->Order();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_Nside_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->Nside();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Healpix_Base_Npix_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  result = (long long)((T_Healpix_Base< int64_t > const *)arg1)->Npix();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Healpix_Base_Scheme_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  Healpix_Ordering_Scheme result;
  intgo _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  result = (Healpix_Ordering_Scheme)((T_Healpix_Base< int64_t > const *)arg1)->Scheme();
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


bool _wrap_Healpix_Base_conformable_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, T_Healpix_Base< long long > *_swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  T_Healpix_Base< int64_t > *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(T_Healpix_Base< int64_t > **)&_swig_go_1; 
  
  result = (bool)((T_Healpix_Base< int64_t > const *)arg1)->conformable((T_Healpix_Base< int64_t > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Healpix_Base_swap_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, T_Healpix_Base< long long > *_swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  T_Healpix_Base< int64_t > *arg2 = 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = *(T_Healpix_Base< int64_t > **)&_swig_go_1; 
  
  (arg1)->swap(*arg2);
  
}


double _wrap_Healpix_Base_max_pixrad__SWIG_0_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  result = (double)((T_Healpix_Base< int64_t > const *)arg1)->max_pixrad();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Healpix_Base_max_pixrad__SWIG_1_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  result = (double)((T_Healpix_Base< int64_t > const *)arg1)->max_pixrad(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Healpix_Base_boundaries_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0, long long _swig_go_1, tsize *_swig_go_2, std::vector< vec3_t< float64 > > *_swig_go_3) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  long long arg2 ;
  tsize arg3 ;
  std::vector< vec3 > *arg4 = 0 ;
  tsize *argp3 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  argp3 = (tsize *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null tsize");
  }
  arg3 = (tsize)*argp3;
  
  arg4 = *(std::vector< vec3 > **)&_swig_go_3; 
  
  ((T_Healpix_Base< int64_t > const *)arg1)->boundaries(arg2,arg3,*arg4);
  
}


arr< int > *_wrap_Healpix_Base_swap_cycles_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  arr< int > result;
  arr< int > *_swig_go_result;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  result = ((T_Healpix_Base< int64_t > const *)arg1)->swap_cycles();
  *(arr< int > **)&_swig_go_result = new arr< int >(result); 
  return _swig_go_result;
}


void _wrap_delete_Healpix_Base_healpix_cxx_5a797e8e3d968ccb(T_Healpix_Base< long long > *_swig_go_0) {
  T_Healpix_Base< int64_t > *arg1 = (T_Healpix_Base< int64_t > *) 0 ;
  
  arg1 = *(T_Healpix_Base< int64_t > **)&_swig_go_0; 
  
  delete arg1;
  
}


double _wrap_orientation_healpix_cxx_5a797e8e3d968ccb(vec3_t< float64 > *_swig_go_0, vec3_t< float64 > *_swig_go_1) {
  vec3 *arg1 = 0 ;
  vec3 *arg2 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(vec3 **)&_swig_go_0; 
  arg2 = *(vec3 **)&_swig_go_1; 
  
  result = (double)orientation((vec3_t< float64 > const &)*arg1,(vec3_t< float64 > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_v_angle_healpix_cxx_5a797e8e3d968ccb(vec3_t< float64 > *_swig_go_0, vec3_t< float64 > *_swig_go_1) {
  vec3 *arg1 = 0 ;
  vec3 *arg2 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(vec3 **)&_swig_go_0; 
  arg2 = *(vec3 **)&_swig_go_1; 
  
  result = (double)v_angle((vec3_t< float64 > const &)*arg1,(vec3_t< float64 > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_cosdist_zphi_healpix_cxx_5a797e8e3d968ccb(double _swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  double _swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  
  result = (double)cosdist_zphi(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_find_enclosing_circle_healpix_cxx_5a797e8e3d968ccb(std::vector< vec3_t< float64 > > *_swig_go_0, vec3_t< float64 > *_swig_go_1, double *_swig_go_2) {
  std::vector< vec3 > *arg1 = 0 ;
  vec3 *arg2 = 0 ;
  double *arg3 = 0 ;
  
  arg1 = *(std::vector< vec3 > **)&_swig_go_0; 
  arg2 = *(vec3 **)&_swig_go_1; 
  arg3 = *(double **)&_swig_go_2; 
  
  find_enclosing_circle((std::vector< vec3_t< float64 > > const &)*arg1,*arg2,*arg3);
  
}


#ifdef __cplusplus
}
#endif

